jdbcServer {
  dbFilePath: "dbFiles/db"
  dbName: "db"
  user: "sa"
  password: ""
}

db {
  url: "jdbc:hsqldb:hsql://localhost/db;sql.syntax_ora=true"
  driver: "org.hsqldb.jdbc.JDBCDriver"
  password: ""
  user: "sa"
  connectionTimeout: 30000
}

httpPort: "8080"
httpPort: ${?HTTP_PORT}

http {
  port: ${httpPort}
}

akka {
  http {
    server.parsing.max-content-length = 300000000 #300MB
    server.parsing.max-uri-length = 200000
  }
}

developmentMode: true

# Authentication configuration
authenticationUsersFile: "./develConf/sample/users.conf"
authenticationUsersFile: ${?AUTHENTICATION_USERS_FILE}

authenticationMethod: "BasicAuth"
authenticationMethod: ${?AUTHENTICATION_METHOD}

authentication: {
  method: ${authenticationMethod}
  clientSecret: ${?OAUTH2_CLIENT_SECRET}
  clientId: ${?OAUTH2_CLIENT_ID}
  authorizeUri: ${?OAUTH2_AUTHORIZE_URI}
  redirectUri: ${?OAUTH2_REDIRECT_URI}
  accessTokenUri: ${?OAUTH2_ACCESS_TOKEN_URI}
  profileUri: ${?OAUTH2_PROFILE_URI}
  accessTokenParams: {
    grant_type: ${?OAUTH2_GRANT_TYPE}
  }
  authorizeParams {
    response_type: ${?OAUTH2_RESPONSE_TYPE}
    scope: ${?OAUTH2_SCOPE}
  }
  headers {
    Accept: ${?AUTHENTICATION_HEADERS_ACCEPT}
  }
  usersFile: ${authenticationUsersFile}
}

environmentAlert: {
  content: "DEVELOPMENT ENVIRONMENT"
  cssClass: "indicator-green"
}

commentSettings: {
  matchExpression: "(issues/[0-9]*)"
  link: "https://github.com/TouK/nussknacker/$1"
}

secondaryEnvironmentUri: "http://localhost:8080/api"
secondaryEnvironmentUri: ${?SECONADRY_ENVIRONMENT_URI}

secondaryEnvironment {
  user: "admin"
  password: "admin"
  targetEnvironmentId: "development"
  remoteConfig: {
    uri: ${secondaryEnvironmentUri}
    batchSize: 10
  }
}

standaloneEngineProcessLocation: "/tmp/standaloneProcesses"
attachmentsPath: "/tmp/attachments"

categoriesConfig: {
  "FraudDetection": "streaming-demo",
  "Recommendations": "streaming-demo",
  "Default": "streaming-generic"
  "Category1": "streaming"
  "Category2": "streaming"
  "ServerRestApi": "request-response"
}

# Model configuration
# ========================

#See demo/docker/docker-compose-env.yml - mapped port from docker
flinkRestUrl: "http://localhost:3031"
flinkRestUrl: ${?FLINK_REST_URL}

#See demo/docker/docker-compose-env.yml - mapped port from docker
flinkQueryableStateProxyUrl: "localhost:3063"
flinkQueryableStateProxyUrl: ${?FLINK_QUERYABLE_STATE_PROXY_URL}

standaloneManagmentUrl: "http://localhost:8070"
standaloneManagmentUrl: ${?STANDALONE_MANAGMENT_URL}

processTypes {
  "streaming": {
    engineConfig {
      jobManagerTimeout: 1m
      type: "flinkStreaming"
      restUrl: ${flinkRestUrl}
      queryableStateProxyUrl: ${flinkQueryableStateProxyUrl}
    }
    modelConfig = ${streamingModelConfig}
  }
 "streaming-generic": {
    engineConfig {
      jobManagerTimeout: 1m
      type: "flinkStreaming"
      restUrl: ${flinkRestUrl}
      queryableStateProxyUrl: ${flinkQueryableStateProxyUrl}
    }
    modelConfig = ${streamingModelGenericConfig}
  }
  "streaming-demo": {
    engineConfig {
      jobManagerTimeout: 1m
      type: "flinkStreaming"
      restUrl: ${flinkRestUrl}
      queryableStateProxyUrl: ${flinkQueryableStateProxyUrl}
    }
    modelConfig = ${streamingModelDemoConfig}
  }
  "request-response": {
    modelConfig {
      classPath: ["../../engine/standalone/engine/sample/target/scala-2.12/standaloneSample.jar"]
      environment: "test"
    }
    engineConfig {
      type: "requestResponseStandalone"
      managementUrl: ${standaloneManagmentUrl}
    }
  }
}

signalsTopic: "nk-sample.signals"
signalsTopic: ${?SIGNALS_TOPIC}

#See demo/docker/docker-compose-env.yml - mapped port from docker
kafkaAddress: "localhost:3032"
kafkaAddress: ${?KAFKA_ADDRESS}

streamingModelConfig {
  classPath: ["../../engine/flink/management/sample/target/scala-2.12/managementSample.jar"]
  environment: "test"

  signals {
    topic: ${signalsTopic}
  }

  timeout: 10s
  restartInterval: 10s
  checkpointInterval: 10s

  kafka {
    kafkaAddress: ${kafkaAddress}
  }

  asyncExecutionConfig {
    bufferSize: 50
    parallelismMultiplier: 1
  }
}

streamingModelGenericConfig {
  classPath: ["../../engine/flink/generic/target/scala-2.12/genericModel.jar"]
  environment: "test"

  signals {
    topic: ${signalsTopic}
  }

  timeout: 10s
  restartInterval: 10s
  checkpointInterval: 10s

  kafka {
    kafkaAddress: ${kafkaAddress}
  }

  asyncExecutionConfig {
    bufferSize: 50
    parallelismMultiplier: 1
  }
}

streamingModelDemoConfig {
  classPath: ["../../engine/demo/target/scala-2.12/demoModel.jar"]
  environment: "test"

  signals {
    topic: ${signalsTopic}
  }

  timeout: 10s
  restartInterval: 10s
  checkpointInterval: 10s

  kafka {
    kafkaAddress: ${kafkaAddress}
  }

  asyncExecutionConfig {
    bufferSize: 50
    parallelismMultiplier: 1
  }
}

customProcesses: {
  "customProcess1": "pl.touk.custom.NonExistingCustomProcess"
}

proxyUrl: "http://localhost:8081"
proxyUrl: ${?NGINX_PROXY_URL}

metricsSettings {
  url: ${proxyUrl}"/grafana/dashboard/db/$dashboard?theme=dark&var-processName=$process&var-env=test"
  defaultDashboard: "flink-esp"
  processingTypeToDashboard: {
    "streaming": "flink-esp"
    "streaming-generic": "flink-generic"
    "streaming-demo": "flink-demo"
    "request-response": "flink-standalone"
  }
}

countsSettings {
  user: "admin"
  password: "admin"
  influxUrl: ${proxyUrl}"/grafana/api/datasources/proxy/1/query"
}

kibanaSettings {
  url: ${proxyUrl}"/kibana/"
}
